# 🧪 Project Vine Testing Rules

This document defines **precise, enforceable rules** for writing tests in Project Vine.
It’s designed to:

* Ensure consistent, maintainable, high-quality tests
* Balance fast execution with deep coverage
* Guide humans and AI contributors equally

---

## ✅ Core Principles

* Test **WHAT** the system does, not **HOW** it does it. Focus on public behavior, not internal implementation. Tests should fail when behavior is incorrect, not just when implementation changes.
* All production code must have tests. No exceptions.
* Tests must be readable, reliable, and relevant.
* All code should maintain **≥90% line and branch coverage**, unless explicitly exempted.
* Tests are tiered by scope and purpose. They must live in the appropriate directory and be tagged using `@pytest.mark.*`.

---

## ✅ Test Structure Rules

### ✅ Function Naming

* Use: `test_<thing_under_test>_<expected_behavior>`
* Examples:

  ```python
  def test_export_method_creates_output_file():
  def test_register_raises_on_duplicate():
  def test_yaml_loader_parses_valid_input():
  ```

### ✅ Docstrings

* Every test must have a 1-line docstring explaining **what is being tested**.

  ```python
  def test_register_raises_on_duplicate():
      """Test that register() raises ValueError if a name is already registered."""
  ```

---

## 🔬 What to Test

### ✅ Focus on:

* Public APIs
* Inputs → Outputs
* Behavioral contracts (e.g., "should raise on duplicate")

### ❌ Do NOT test:

* Internal private methods (`_helper_func`) unless they are complex and reused
* Third-party code (e.g., don't test what MoviePy does internally)
* Logic that's already tested elsewhere (no shallow wrappers)

---

## 🧪 Assertion Rules

### ✅ What to Assert:

* Return values
* Exceptions (with `pytest.raises`)
* Side effects (e.g., function calls, state changes)

### ❌ Anti-patterns:

* `assert True`
* Only asserting that a method was called, without verifying behavior

### ✅ Examples:

```python
result = builder.export("test.mp4")
assert result.success
assert result.output_path.endswith(".mp4")

with pytest.raises(ValueError):
    registry.register("name", {})
```

---

## 🧱 Mocking Rules

### ✅ When to Mock:

* File system (`os`, `open`, `os.path.*`)
* Time (`datetime`, `time.sleep`)
* Rendering (`render_with_audio`, `write_videofile`)
* Network, subprocess, randomness
* **HTTP clients:** `requests`, `httpx`, `aiohttp`
* **Database engines:** `sqlalchemy`, `psycopg2`, `motor`
* **Cloud SDKs:** `boto3`, `google-cloud-storage`

### ✅ How to Mock:

* Use `@patch` decorators for readability:

  ```python
  @patch("vine.rendering.video_renderer.VideoRenderer.render_with_audio")
  def test_export_mocks_audio(mock_render):
      ...
  ```

* Use `MagicMock()` (not `Mock()`) for all object mocks unless mocking simple functions

* Always assert call expectations:

  ```python
  mock_clip.write_videofile.assert_called_once_with("test.mp4")
  ```

* Use `spec=ClassName` when mocking objects:

  ```python
  mock_clip = MagicMock(spec=VideoClip)
  ```

### ❌ Never Mock:

* The method you're testing itself
* Pure internal logic (e.g. `TimelineBuilder._build_layers`)

### ✅ Do Mock Your Own Code:

Only when isolating layers in orchestration tests:

```python
@patch.object(TimelineBuilder, "render")
def test_export_calls_render(mock_render):
    builder = TimelineBuilder(...)
    builder.export("out.mp4")
    mock_render.assert_called_once()
```

---

## 🧪 Pytest Markers

We use `@pytest.mark.<suite>` to tag each test with its suite type. This enables:

* Selective CI runs
* Developer-only test subsets
* Enforcing test isolation and test runtime budgets

Example:

```python
import pytest

@pytest.mark.unit
def test_normalizes_path_correctly():
    ...
```

Pytest markers are defined in `pyproject.toml` or `pytest.ini` to avoid unknown marker warnings.

---

## 📊 Required Test Coverage

* All code must maintain **≥90% line and branch coverage**, enforced via `pytest-cov`.
* Use:

  ```bash
  pytest --cov --cov-report=term-missing --cov-report=html
  ```
* Coverage is enforced in CI (`fail_under = 90`).
* Use `# pragma: no cover` **only** for:

  * Exception branches that are impossible to trigger
  * Platform-specific logic

🔒 For security-critical or stateful logic (e.g., reducers, validators, agents), aim for **100%** coverage.

---

## 🧬 Mutation Testing (Advanced)

Use mutation testing tools like `mutmut` or `cosmic-ray` for core logic to ensure your tests are meaningful:

* Detects tests that pass even when the underlying logic is wrong.
* Mandatory for:

  * Reward function evaluation
  * Flow control
  * Critical reducers

---

## 📏 Naming Conventions

* **Test files:** `test_<module>.py`
* **Test classes:** `Test<ClassName>`
* **Test methods:** `test_<expected_behavior>_when_<context>()`

Example:

```python
def test_returns_403_when_user_is_unauthenticated():
    ...
```

Good names communicate *intent*, not just coverage.

---

## 🔁 Fixtures & Setup

* Shared fixtures go in `conftest.py`.
* Use factories (e.g., `FactoryBoy`, `pydantic-factories`) for generating domain objects.
* Use `@pytest.fixture(scope="session")` for expensive setup (containers, DBs).
* Avoid `autouse=True` unless strictly needed.

---

## 🧹 Warning Suppression

* ✅ Scoped warnings allowed (e.g. MoviePy, Pillow)
* ❌ Global suppressions like `"ignore::DeprecationWarning:.*"` are NOT allowed
* Use `warnings.filterwarnings()` scoped by module and type

Example:

```python
warnings.filterwarnings("ignore", category=UserWarning, module="moviepy.*")
```

---

## 🔬 Testing Best Practices

### ✅ Test both happy and failure paths:

```python
assert builder.export("good.mp4").success

with pytest.raises(FileNotFoundError):
    builder.export("missing.png")
```

### ✅ Keep test runtime < 200ms

Use mocks and `tmp_path` to avoid disk/memory bloat.

### ✅ Use helper fixtures and factory functions:

```python
@pytest.fixture
def test_builder():
    return TimelineBuilder(width=1280, height=720, fps=30)
```

---

## 📁 Test Directory Structure

| Directory            | Purpose                            |
| -------------------- | ---------------------------------- |
| `tests/unit/`        | Fast logic tests                   |
| `tests/integration/` | Module-to-module interaction tests |
| `tests/data/`        | Minimal static fixtures/assets     |
| `tests/functional/`  | Cross-module behavior              |
| `tests/e2e/`         | End-to-end workflows               |

---

## 🚫 Anti-Patterns

| Bad Practice                                 | Fix It With                           |
| -------------------------------------------- | ------------------------------------- |
| `assert True`                                | Remove test or write a real assertion |
| Patching too deep (`patch(patch(patch...))`) | Use `@patch` decorators               |
| Tests that hit disk unnecessarily            | Use mocks or `tmp_path`               |
| Testing mocks, not logic                     | Assert outputs, not just method calls |
| Tests that depend on runtime config          | Use fixtures to inject config/state   |

---

## 🔧 CI Strategy

CI splits test execution by marker and runtime budget:

```yaml
- name: Unit Tests
  run: pytest tests/unit -m unit

- name: Integration Tests
  run: pytest tests/integration -m integration

- name: End-to-End Tests (nightly only)
  if: github.event.schedule == '0 3 * * *'
  run: pytest tests/e2e -m e2e
```

Use `@pytest.mark.slow` for anything >5s and isolate it.

---

## ✅ Summary

Tests should be:

* Isolated (no external side effects)
* Fast (sub-second runtime)
* Focused (clear purpose)
* Descriptive (naming + docstrings)
* Strategic (mocking boundaries only)

Write tests like you're writing code people will read, debug, and refactor for years.

Let Iris know if you want this enforced with a lint rule or pre-commit hook.

---

### 🔖 Glob Configuration

```yaml
globs: tests/**/*.py
alwaysApply: false
```
