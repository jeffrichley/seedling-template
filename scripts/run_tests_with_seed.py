#!/usr/bin/env python3
"""Script to run tests with a specific random seed for reproducibility."""

import subprocess
import sys
import random
from pathlib import Path


def run_tests_with_seed(seed: int = None, test_path: str = None, args: list = None) -> int:
    """Run pytest with a specific random seed.
    
    Args:
        seed: Random seed to use. If None, uses auto to let pytest-randomly generate a new seed.
        test_path: Specific test path to run. If None, runs all tests.
        args: Additional pytest arguments.
    
    Returns:
        Exit code from pytest.
    """
    if seed is None:
        cmd = ["uv", "run", "pytest"]
    else:
        cmd = ["uv", "run", "pytest", f"--randomly-seed={seed}"]
    
    if test_path:
        cmd.append(test_path)
    
    if args:
        cmd.extend(args)
    
    if seed is None:
        print("Running tests with auto-generated random seed")
    else:
        print(f"Running tests with seed: {seed}")
    print(f"Command: {' '.join(cmd)}")
    print("-" * 50)
    
    result = subprocess.run(cmd, cwd=Path.cwd())
    
    print("-" * 50)
    print(f"Tests completed with exit code: {result.returncode}")
    if seed is not None:
        print(f"Seed used: {seed}")
    else:
        print("Seed was auto-generated by pytest-randomly")
    
    return result.returncode


def main():
    """Main function to handle command line arguments."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Run tests with a specific random seed")
    parser.add_argument("--seed", type=int, help="Random seed to use")
    parser.add_argument("--test-path", help="Specific test path to run")
    parser.add_argument("--args", nargs="*", help="Additional pytest arguments")
    parser.add_argument("--show-last-seed", action="store_true", 
                       help="Show the last seed used from .pytest_cache")
    
    args = parser.parse_args()
    
    if args.show_last_seed:
        # Try to read the last seed from pytest cache
        cache_file = Path(".pytest_cache/v/cache/lastfailed")
        if cache_file.exists():
            try:
                with open(cache_file, 'r') as f:
                    content = f.read()
                    if "randomly-seed" in content:
                        import re
                        match = re.search(r"randomly-seed=(\d+)", content)
                        if match:
                            print(f"Last seed used: {match.group(1)}")
                        else:
                            print("No seed found in cache")
                    else:
                        print("No seed information in cache")
            except Exception as e:
                print(f"Error reading cache: {e}")
        else:
            print("No pytest cache found")
        return 0
    
    return run_tests_with_seed(
        seed=args.seed,
        test_path=args.test_path,
        args=args.args
    )


if __name__ == "__main__":
    sys.exit(main()) 