# ADR 0001: Template Design Philosophy

## Status

Accepted

## Context

This Copier template is designed to provide a world-class, reproducible foundation for Python projects with automated CI/CD, comprehensive documentation, and modern development workflows.

## Decision

The template follows a **Copier + uv + Nox + Just + Sphinx + pre-commit-ci** stack with the following design principles:

### Core Philosophy

1. **Modern Python Tooling**: Use uv for fast dependency management, Nox for task automation, and Just for developer convenience
2. **Quality First**: Comprehensive pre-commit hooks, type checking, and quality gates
3. **Documentation Driven**: Sphinx with MyST for beautiful, maintainable documentation
4. **CI/CD Ready**: GitHub Actions workflows for testing, documentation, and releases
5. **Developer Experience**: Pre-configured development environment with clear workflows

### Template Structure

```
{{ project_slug }}/
├── src/{{ project_slug }}/     # Source code
├── tests/                                # Test suite
├── docs/                                 # Documentation
│   ├── source/                          # Sphinx source
│   └── adr/                             # Architecture decisions
├── examples/                            # Example code (placeholder)
├── docs/                                # Documentation
├── .github/workflows/                   # CI/CD pipelines
├── noxfile.py                          # Task automation
├── justfile                            # Developer shortcuts
├── pyproject.toml                      # Project configuration
└── .pre-commit-config.yaml             # Quality hooks
```

### Key Features

- **Dependency Groups**: Modular installation for different use cases
- **Quality Gates**: Automated checks for linting, type safety, coverage, complexity
- **Documentation**: Auto-generated API docs with Sphinx
- **Testing**: Comprehensive test suite with coverage reporting
- **CI/CD**: Automated testing, documentation building, and releases
- **Security**: Dependency vulnerability scanning
- **Type Safety**: Full MyPy integration with strict mode

## Consequences

### Positive

- **Consistency**: All projects follow the same high-quality patterns
- **Productivity**: Pre-configured tools and workflows
- **Maintainability**: Clear structure and automated quality checks
- **Scalability**: Modular design supports projects of any size
- **Modern**: Uses latest Python tooling and best practices

### Considerations

- **Learning Curve**: Developers need to understand the tool stack
- **Opinionated**: Template enforces specific patterns and tools
- **Dependencies**: Requires specific versions of tools (uv, nox, just)

## Implementation

This ADR is implemented through the template structure and configuration files. The template uses Jinja2 templating to customize all project-specific references while maintaining the core architecture and workflows.
