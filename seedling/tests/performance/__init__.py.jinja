"""Performance tests for Cursor Project.

This package contains tests that verify system performance characteristics:
- Test response times, throughput, and resource usage
- Measure performance under various load conditions
- Verify performance meets requirements and SLAs
- Focus on system performance, not functional correctness
- May use specialized tools for load testing and profiling

Use @pytest.mark.performance to mark your tests.

Example:
    @pytest.mark.performance
    def test_api_response_time_under_load():
        '''API responds within acceptable time under normal load.'''

        # Arrange
        concurrent_requests = 100
        expected_max_time = 2.0  # seconds

        # Act
        response_times = []
        for _ in range(concurrent_requests):
            start_time = time.time()
            response = api_client.get_data()
            response_times.append(time.time() - start_time)

        # Assert
        avg_time = sum(response_times) / len(response_times)
        assert avg_time < expected_max_time
        assert max(response_times) < expected_max_time * 2

Best Practices:
- Set clear performance requirements and SLAs
- Test under realistic load conditions
- Measure response times, throughput, and resource usage
- Use performance testing tools when appropriate
- Test performance degradation under stress
- Monitor memory usage, CPU, and I/O patterns
- Establish performance baselines and track regressions
"""
