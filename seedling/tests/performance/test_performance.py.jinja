"""Example performance tests for {{ project_name }}.

This module demonstrates proper performance testing practices following the project's
testing rules and conventions.
"""

import pytest
import time
import psutil
import os
from {{ project_slug }} import main_function


@pytest.mark.performance
class TestMainFunctionPerformance:
    """Performance tests for main_function execution characteristics."""
    
    def test_main_function_execution_time(self):
        """Completes within acceptable time limit for normal input."""
        
        # Arrange
        input_data = "performance test data"
        max_execution_time = 0.1  # 100ms
        
        # Act
        start_time = time.time()
        result = main_function(input_data)
        execution_time = time.time() - start_time
        
        # Assert
        assert result == "Processed: performance test data"
        assert execution_time < max_execution_time
    
    def test_main_function_memory_usage(self):
        """Uses acceptable amount of memory."""
        
        # Arrange
        input_data = "memory test data"
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss
        
        # Act
        result = main_function(input_data)
        final_memory = process.memory_info().rss
        memory_increase = final_memory - initial_memory
        
        # Assert
        assert result == "Processed: memory test data"
        # Memory increase should be minimal (less than 1MB)
        assert memory_increase < 1024 * 1024
    
    def test_main_function_with_large_input(self):
        """Handles large input efficiently."""
        
        # Arrange
        large_input = "x" * 100000  # 100KB of data
        max_execution_time = 1.0  # 1 second
        
        # Act
        start_time = time.time()
        result = main_function(large_input)
        execution_time = time.time() - start_time
        
        # Assert
        assert result == "Processed: " + large_input
        assert execution_time < max_execution_time
        assert len(result) == len("Processed: ") + len(large_input)
    
    def test_main_function_concurrent_execution(self):
        """Handles concurrent execution without performance degradation."""
        
        # Arrange
        import threading
        import queue
        
        results_queue = queue.Queue()
        num_threads = 10
        threads = []
        
        def worker(thread_id):
            input_data = f"thread_{thread_id}_data"
            result = main_function(input_data)
            results_queue.put((thread_id, result))
        
        # Act
        start_time = time.time()
        
        for i in range(num_threads):
            thread = threading.Thread(target=worker, args=(i,))
            threads.append(thread)
            thread.start()
        
        for thread in threads:
            thread.join()
        
        execution_time = time.time() - start_time
        
        # Assert
        assert execution_time < 2.0  # Should complete within 2 seconds
        assert results_queue.qsize() == num_threads
        
        # Verify all results are correct
        for i in range(num_threads):
            thread_id, result = results_queue.get()
            assert result == f"Processed: thread_{thread_id}_data"
    
    def test_main_function_throughput(self):
        """Processes multiple inputs with good throughput."""
        
        # Arrange
        num_operations = 1000
        max_total_time = 5.0  # 5 seconds for 1000 operations
        
        # Act
        start_time = time.time()
        
        for i in range(num_operations):
            input_data = f"throughput_test_{i}"
            result = main_function(input_data)
            assert result == f"Processed: throughput_test_{i}"
        
        total_time = time.time() - start_time
        
        # Assert
        assert total_time < max_total_time
        throughput = num_operations / total_time
        assert throughput > 100  # At least 100 operations per second
    
    def test_main_function_cpu_usage(self):
        """Uses CPU efficiently without excessive consumption."""
        
        # Arrange
        input_data = "cpu test data"
        process = psutil.Process(os.getpid())
        
        # Act
        # Measure CPU usage over multiple calls
        cpu_percentages = []
        for _ in range(10):
            cpu_percent = process.cpu_percent(interval=0.1)
            main_function(input_data)
            cpu_percentages.append(cpu_percent)
        
        avg_cpu_usage = sum(cpu_percentages) / len(cpu_percentages)
        
        # Assert
        # CPU usage should be reasonable (less than 50% on average)
        assert avg_cpu_usage < 50.0 