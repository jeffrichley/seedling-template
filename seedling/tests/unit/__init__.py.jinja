"""Unit tests for Cursor Project.

This package contains fast, isolated tests that:
- Test individual functions, methods, or classes in isolation
- Mock all external dependencies (databases, APIs, file systems)
- Focus on testing the logic and behavior of single units of code
- Should be fast to run (milliseconds per test)
- Verify input/output relationships and edge cases

Use @pytest.mark.unit to mark your tests.

Example:
    @pytest.mark.unit
    def test_calculate_total_with_discount():
        '''Test discount calculation logic.'''

        # Arrange
        price = 100
        discount_rate = 0.1

        # Act
        result = calculate_total(price, discount_rate)

        # Assert
        assert result == 90

Best Practices:
- Test one behavior per test function
- Mock external dependencies using unittest.mock
- Test both happy path and error conditions
- Keep tests fast and focused
- Test edge cases and boundary conditions
- Use descriptive test names that explain the scenario
- Arrange-Act-Assert pattern for clear test structure
"""
