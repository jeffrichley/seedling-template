[project]
name = "vine"
version = "0.1.0"
description = "Modular, agent-compatible video composition framework"
authors = [
  { name = "Jeff Richley", email = "jeffrichley@gmail.com" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.11"
keywords = ["ai", "video", "composition", "moviepy", "vine", "agents"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed"
]
dependencies = [
    "moviepy>=1.0.3",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.2",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "pre-commit>=4.2.0",
    "rich>=14.0.0",
    "setuptools>=80.9.0",
]

[project.optional-dependencies]
dev = [
  "black>=24.3.0",
  "ruff>=0.4.0",
  "pytest>=7.4",
  "pytest-cov>=4.1",
  "pytest-asyncio>=0.23.0",
  "mypy>=1.16.1",
  "pre-commit>=3.6",
  "mkdocs-material>=9.5",
  "pip-audit>=2.6",
  "ipython>=8.10",
  "types-requests",
  "types-pyyaml>=6.0.12.20250516",
  "vulture>=2.14",
]

docs = [
  "sphinx>=7.0.0",
  "sphinx-rtd-theme>=1.3.0",
  "sphinx-autodoc-typehints>=1.25.0",
  "sphinx-copybutton>=0.5.0",
  "myst-parser>=2.0.0"
]

test = [
  "pytest",
  "pytest-cov",
  "pytest-asyncio>=0.23.0",
  "hypothesis"
]

typecheck = [
  "mypy"
]

security = [
  "pip-audit"
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src"]  # Helps with module resolution

[tool.ruff.lint]
extend-select = [
  "E", "F", "I", "N", "B", "Q", "SIM", "C90", "ARG", "TID"
]
ignore = [
  "E501",  # Line too long (we use Black's wrapping)
  "B008"   # Don't call function with mutable default
]
fixable = ["ALL"]  # Enables autofix where possible
unfixable = []     # Keep empty to allow all fixes

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"yaml" = {msg = "Use `vine.utils.yaml_utils` instead of importing `yaml` directly."}

[tool.mypy]
plugins = ["pydantic.mypy"]
files = ["src", "tests"]
python_version = "3.11"
mypy_path = "stubs"
warn_return_any = true  # Enable return type warnings
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = false
check_untyped_defs = true  # Enable checking bodies of untyped functions
disallow_untyped_decorators = false
no_implicit_optional = true  # Enable strict optional type checking
warn_redundant_casts = false  # Disabled to avoid cast issues
warn_unused_ignores = false
warn_no_return = true  # Enable no-return warnings
warn_unreachable = false  # Disabled to avoid unreachable code errors
strict_equality = true  # Enable strict equality checking
exclude = []

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = ["debug_*.py", "test_*_debug.py"]
addopts = [
    "--cov",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
filterwarnings = [
    "ignore::pydantic.PydanticDeprecatedSince20:vine.*"
]

[tool.coverage.run]
source = ["src/vine"]

[tool.coverage.report]
fail_under = 80
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "monkeytype>=23.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "types-pyyaml>=6.0.12.20250516",
]
