name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv sync --all-extras

    # Quality Gate 1: PyProject Configuration
    - name: Quality Gate - PyProject Configuration
      run: |
        uv run validate-pyproject
      continue-on-error: false

    # Quality Gate 2: Linting
    - name: Quality Gate - Linting
      run: |
        uv run ruff check src/ tests/
      continue-on-error: false

    # Quality Gate 3: Type Safety
    - name: Quality Gate - Type Safety
      run: |
        uv run mypy --config-file=pyproject.toml src/ tests/
      continue-on-error: false

    # Quality Gate 4: Test Coverage
    - name: Quality Gate - Test Coverage
      run: |
        uv run pytest
      continue-on-error: false

    # Quality Gate 5: Code Complexity
    - name: Quality Gate - Code Complexity
      run: |
        uv run xenon --max-absolute B --max-average A src/
      continue-on-error: false



    # Upload coverage reports to Codecov
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: jeffrichley/vine
        # Upload from both Python versions with flags
        flags: python-${{ matrix.python-version }}

    # Quality Gate Summary
    - name: Quality Gate Summary
      if: always()
      run: |
        echo "ðŸŽ¯ Quality Gates Summary"
        echo "========================"
        echo "âœ… All quality gates passed!"
        echo ""
        echo "Quality Gates Enforced:"
        echo "1. PyProject Configuration (validate-pyproject)"
        echo "2. Linting (Ruff)"
        echo "3. Type Safety (MyPy)"
        echo "4. Test Coverage (â‰¥80%)"
        echo "5. Code Complexity (Xenon)"
        echo "6. Security Audit (pip-audit)"
        echo "7. Documentation Build"
        echo ""
        echo "ðŸš€ Code quality standards maintained!"

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-extras

    # Quality Gate 7: Security Audit
    - name: Quality Gate - Security Audit
      run: |
        uv run pip-audit
      continue-on-error: false

  docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-extras

    # Quality Gate 8: Documentation Build
    - name: Quality Gate - Documentation Build
      run: |
        cd docs && uv run make html
      continue-on-error: false

  build:
    runs-on: ubuntu-latest
    needs: [test, security, docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Build package
      run: |
        uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
