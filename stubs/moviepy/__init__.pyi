"""Stub file for moviepy module based on actual usage in Vine project."""

from collections.abc import Sequence
from typing import Any, Union

# Type alias for audio effects - these are imported from moviepy.audio.fx
AudioEffect = Union["AudioFadeIn", "AudioFadeOut", "AudioNormalize"]

# Video classes
class VideoClip:
    def with_duration(self, duration: float) -> VideoClip: ...
    def with_position(self, pos: tuple[float, float]) -> VideoClip: ...
    def with_opacity(self, opacity: float) -> VideoClip: ...
    def with_fps(self, fps: float) -> VideoClip: ...
    def with_audio(self, audio: Any) -> VideoClip: ...
    def resize(self, newsize: tuple[int, int]) -> VideoClip: ...
    def close(self) -> None: ...
    def set_duration(self, duration: float) -> VideoClip: ...
    def write_videofile(self, filename: str, **kwargs: Any) -> None: ...

class ImageClip(VideoClip):
    def __init__(
        self,
        img: str,
        is_mask: bool = False,
        transparent: bool = True,
        fromalpha: bool = False,
        duration: float | None = None,
    ) -> None: ...
    def with_duration(self, duration: float) -> ImageClip: ...
    def with_position(self, pos: tuple[float, float]) -> ImageClip: ...
    def with_opacity(self, opacity: float) -> ImageClip: ...
    def with_fps(self, fps: float) -> ImageClip: ...
    def with_audio(self, audio: Any) -> ImageClip: ...
    def resize(self, newsize: tuple[int, int]) -> ImageClip: ...

class TextClip(VideoClip):
    def __init__(
        self,
        text: str,
        font_size: int = 48,
        color: str = "white",
        method: str = "caption",
        size: tuple[int, int] = (800, 600),
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    def with_duration(self, duration: float) -> TextClip: ...
    def with_position(self, pos: tuple[float, float]) -> TextClip: ...
    def with_opacity(self, opacity: float) -> TextClip: ...
    def with_fps(self, fps: float) -> TextClip: ...
    def with_audio(self, audio: Any) -> TextClip: ...
    def resize(self, newsize: tuple[int, int]) -> TextClip: ...

class ColorClip(VideoClip):
    def __init__(
        self,
        size: tuple[int, int],
        color: tuple[int, int, int] = (0, 0, 0),
        duration: float | None = None,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    def with_duration(self, duration: float) -> ColorClip: ...
    def with_position(self, pos: tuple[float, float]) -> ColorClip: ...
    def with_opacity(self, opacity: float) -> ColorClip: ...
    def with_fps(self, fps: float) -> ColorClip: ...
    def with_audio(self, audio: Any) -> ColorClip: ...
    def resize(self, newsize: tuple[int, int]) -> ColorClip: ...

class VideoFileClip(VideoClip): ...

class CompositeVideoClip(VideoClip):
    def __init__(
        self,
        clips: Sequence[VideoClip],
        size: tuple[int, int] | None = None,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    def with_duration(self, duration: float) -> CompositeVideoClip: ...
    def with_position(self, pos: tuple[float, float]) -> CompositeVideoClip: ...
    def with_opacity(self, opacity: float) -> CompositeVideoClip: ...
    def with_fps(self, fps: float) -> CompositeVideoClip: ...
    def with_audio(self, audio: Any) -> CompositeVideoClip: ...
    def resize(self, newsize: tuple[int, int]) -> CompositeVideoClip: ...

# Audio classes
class AudioClip:
    def __init__(
        self,
        make_frame: Any,
        duration: float | None = None,
        *args: Any,
        **kwargs: Any,
    ) -> None: ...
    def with_duration(self, duration: float) -> AudioClip: ...
    def with_volume_function(self, func: Any) -> AudioClip: ...
    def with_volume_scaled(self, factor: float) -> AudioClip: ...
    def with_effects(self, effects: list[Any]) -> AudioClip: ...
    def close(self) -> None: ...
    def set_duration(self, duration: float) -> AudioClip: ...

class AudioFileClip(AudioClip):
    def with_duration(self, duration: float) -> AudioFileClip: ...
    def with_volume_function(self, func: Any) -> AudioFileClip: ...
    def with_volume_scaled(self, factor: float) -> AudioFileClip: ...
    def with_effects(self, effects: list[Any]) -> AudioFileClip: ...

class CompositeAudioClip(AudioClip):
    def __init__(
        self, clips: Sequence[AudioClip], *args: Any, **kwargs: Any
    ) -> None: ...
    def with_duration(self, duration: float) -> CompositeAudioClip: ...
    def with_volume_function(self, func: Any) -> CompositeAudioClip: ...
    def with_volume_scaled(self, factor: float) -> CompositeAudioClip: ...
    def with_effects(self, effects: Sequence[Any]) -> CompositeAudioClip: ...

# Audio effects classes
class AudioFadeIn:  # noqa: N802
    def __init__(self, duration: float, *args: Any, **kwargs: Any) -> None: ...

class AudioFadeOut:  # noqa: N802
    def __init__(self, duration: float, *args: Any, **kwargs: Any) -> None: ...

class AudioNormalize:  # noqa: N802
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

# Main classes we use
__all__ = [
    "VideoClip",
    "VideoFileClip",
    "CompositeVideoClip",
    "ImageClip",
    "TextClip",
    "ColorClip",
    "AudioClip",
    "AudioFileClip",
    "CompositeAudioClip",
    "AudioFadeIn",
    "AudioFadeOut",
    "AudioNormalize",
]
